list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
run <- T
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
print(paste(nrow(dirs.df), 'returns to the directory above the current directory'))
n <- readline(prompt = 'Select number of directory to extract files to: ')
n <- as.integer(n)
r <- T
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
r <- F
setwd(dirs.df$Directory[n])
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
2
n <- as.integer(n)
r <- T
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
outputDir <- getAbsolutePath(dirs.df$Directory[n])
print(paste0('Extracting ', file.type, ' files to ', outputDir))
r <- F
run <- F
#File extraction
setwd(path)
path <- inputDir
exdir <- outputDir
#File extraction
setwd(path)
if ('.zip' %in% file.type == T){
zipfiles <- list.files(pattern = '.zip$')
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
zipindex <- match(txtgzzipfiles,zipfiles)
if (length(zipindex) > 0){
zipfiles <- zipfiles[-zipindex]
}
for (i in zipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files,
exdir = outputDir)
}
for (i in txtgzzipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files)
}
gzfilestoremove <- list.files(pattern = 'txt.gz$')
for (i in gzfilestoremove){
gunzip(i,
overwrite = overwrite.files,
remove = T,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
gzfiles <- list.files(pattern = '.gz')
gzindex <- match(txtgzzipfiles,gzfiles)
if (length(gzindex) > 0){
gzfiles <- gzfiles[-gzindex]
}
gzfiles
if ('.gz' %in% file.type == T){
for (i in gzfiles){
gunzip(i,
overwrite = overwrite.files,
remove = F,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
}
extract.Files <- function (path = getwd(),
exdir = getwd(),
file.type = c('.zip','.gz'),
overwrite.files = F){
#Select path to compressed files
if (path == 'select') {
dirtop <- getwd()
run <- T
while(run == T){
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
print(paste(nrow(dirs.df), 'returns to the directory above the current directory'))
n <- readline(prompt = 'Select number for path of files to be extracted: ')
n <- as.integer(n)
if (is.na(n) == T | is.double(n) == T){
stop('Entered value is not an integer, please type an integer')
}
if (!(n %in% 1:length(dirs))){
stop('Number outside of directory range')
} else {
r <- T
while(r == T){
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
if (is.na(continue) == T | is.double(continue) == T | continue < 1 | continue > 2){
stop('Entered value is invalid, please select 1 or 2')
}
if (continue == 1){
inputDir <- getAbsolutePath(dirs.df$Directory[n])
print(paste0('Extracting files from ', inputDir))
#Set exit directory
if (exdir == 'select'){
setwd(dir)
run <- T
while(run == T){
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
print(paste(nrow(dirs.df), 'returns to the directory above the current directory'))
n <- readline(prompt = 'Select number of directory to extract files to: ')
n <- as.integer(n)
if (is.na(n) == T | is.double(n) == T){
stop('Entered value is not an integer, please type an integer')
}
if (!(n %in% 1:length(dirs))){
stop('Number outside of directory range')
} else {
r <- T
while(r == T){
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
if (is.na(continue) == T | is.double(continue) == T | continue < 1 | continue > 2){
stop('Entered value is invalid, please select 1 or 2')
}
if (continue == 1){
outputDir <- getAbsolutePath(dirs.df$Directory[n])
print(paste0('Extracting ', file.type, ' files to ', outputDir))
r <- F
run <- F
break
}
if (continue == 2) {
r <- F
setwd(dirs.df$Directory[n])
}
if (r == F) break()
}
}
if (run == F) break
}
}
}
if (continue == 2) {
r <- F
setwd(dirs.df$Directory[n])
}
rm(continue)
if (r == F) break()
}
}
if (run == F) break
}
path <- inputDir
exdir <- outputDir
}
#File extraction
setwd(path)
if ('.zip' %in% file.type == T){
zipfiles <- list.files(pattern = '.zip$')
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
zipindex <- match(txtgzzipfiles,zipfiles)
if (length(zipindex) > 0){
zipfiles <- zipfiles[-zipindex]
}
for (i in zipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files,
exdir = outputDir)
}
for (i in txtgzzipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files)
}
gzfilestoremove <- list.files(pattern = 'txt.gz$')
for (i in gzfilestoremove){
gunzip(i,
overwrite = overwrite.files,
remove = T,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
gzfiles <- list.files(pattern = '.gz')
gzindex <- match(txtgzzipfiles,gzfiles)
if (length(gzindex) > 0){
gzfiles <- gzfiles[-gzindex]
}
if ('.gz' %in% file.type == T){
for (i in gzfiles){
gunzip(i,
overwrite = overwrite.files,
remove = F,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
}
}
extract.Files(path = 'select', exdir = 'select', file.type = '.gz')
setwd("X:/USF/R_Programming/FileR/FileR")
setwd(topdir)
extract.Files <- function (path = getwd(),
exdir = getwd(),
file.type = c('.zip','.gz'),
overwrite.files = F){
#Select path to compressed files
if (path == 'select') {
dirtop <- getwd()
run <- T
while(run == T){
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
print(paste(nrow(dirs.df), 'returns to the directory above the current directory'))
n <- readline(prompt = 'Select number for path of files to be extracted: ')
n <- as.integer(n)
if (is.na(n) == T | is.double(n) == T){
stop('Entered value is not an integer, please type an integer')
}
if (!(n %in% 1:length(dirs))){
stop('Number outside of directory range')
} else {
r <- T
while(r == T){
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
if (is.na(continue) == T | is.double(continue) == T | continue < 1 | continue > 2){
stop('Entered value is invalid, please select 1 or 2')
}
if (continue == 1){
inputDir <- getAbsolutePath(dirs.df$Directory[n])
print(paste0('Extracting files from ', inputDir))
#Set exit directory
if (exdir == 'select'){
setwd(dir)
run <- T
while(run == T){
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
print(paste(nrow(dirs.df), 'returns to the directory above the current directory'))
n <- readline(prompt = 'Select number of directory to extract files to: ')
n <- as.integer(n)
if (is.na(n) == T | is.double(n) == T){
stop('Entered value is not an integer, please type an integer')
}
if (!(n %in% 1:length(dirs))){
stop('Number outside of directory range')
} else {
r <- T
while(r == T){
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
if (is.na(continue) == T | is.double(continue) == T | continue < 1 | continue > 2){
stop('Entered value is invalid, please select 1 or 2')
}
if (continue == 1){
outputDir <- getAbsolutePath(dirs.df$Directory[n])
print(paste0('Extracting ', file.type, ' files to ', outputDir))
r <- F
run <- F
break
}
if (continue == 2) {
r <- F
setwd(dirs.df$Directory[n])
}
if (r == F) break()
}
}
if (run == F) break
}
}
}
if (continue == 2) {
r <- F
setwd(dirs.df$Directory[n])
}
rm(continue)
if (r == F) break()
}
}
if (run == F) break
}
path <- inputDir
exdir <- outputDir
}
#File extraction
setwd(path)
if ('.zip' %in% file.type == T){
zipfiles <- list.files(pattern = '.zip$')
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
zipindex <- match(txtgzzipfiles,zipfiles)
if (length(zipindex) > 0){
zipfiles <- zipfiles[-zipindex]
}
for (i in zipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files,
exdir = outputDir)
}
for (i in txtgzzipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files)
}
gzfilestoremove <- list.files(pattern = 'txt.gz$')
for (i in gzfilestoremove){
gunzip(i,
overwrite = overwrite.files,
remove = T,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
gzfiles <- list.files(pattern = '.gz')
gzindex <- match(txtgzzipfiles,gzfiles)
if (length(gzindex) > 0){
gzfiles <- gzfiles[-gzindex]
}
if ('.gz' %in% file.type == T){
for (i in gzfiles){
gunzip(i,
overwrite = overwrite.files,
remove = F,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
}
setwd(dirtop)
}
extract.Files(path = 'select', exdir = 'select', file.type = '.gz')
#
extract.Files <- function (path = getwd(),
exdir = getwd(),
file.type = c('.zip','.gz'),
overwrite.files = F){
#Select path to compressed files
if (path == 'select') {
dirtop <- getwd()
run <- T
while(run == T){
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
print(paste(nrow(dirs.df), 'returns to the directory above the current directory'))
n <- readline(prompt = 'Select number for path of files to be extracted: ')
n <- as.integer(n)
if (is.na(n) == T | is.double(n) == T){
stop('Entered value is not an integer, please type an integer')
}
if (!(n %in% 1:length(dirs))){
stop('Number outside of directory range')
} else {
r <- T
while(r == T){
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
if (is.na(continue) == T | is.double(continue) == T | continue < 1 | continue > 2){
stop('Entered value is invalid, please select 1 or 2')
}
if (continue == 1){
inputDir <- getAbsolutePath(dirs.df$Directory[n])
print(paste0('Extracting files from ', inputDir))
#Set exit directory
if (exdir == 'select'){
setwd(dir)
run <- T
while(run == T){
list.dirs(recursive = F)
dirs <- c(list.dirs(recursive = F),substr(getwd(),1,tail(unlist(gregexpr('/',getwd()))-1, n=1)))
nu_dirs <- 1:(length(dirs))
dirs.df <- data.frame(nu_dirs,dirs)
colnames(dirs.df) <- c('Number','Directory')
print(dirs.df ,row.names = F)
print(paste(nrow(dirs.df), 'returns to the directory above the current directory'))
n <- readline(prompt = 'Select number of directory to extract files to: ')
n <- as.integer(n)
if (is.na(n) == T | is.double(n) == T){
stop('Entered value is not an integer, please type an integer')
}
if (!(n %in% 1:length(dirs))){
stop('Number outside of directory range')
} else {
r <- T
while(r == T){
print('1.) Set working directory')
print('2.) Choose Subdirectory')
continue <- readline(prompt = 'Select option 1 or 2: ')
continue <- as.integer(continue)
if (is.na(continue) == T | is.double(continue) == T | continue < 1 | continue > 2){
stop('Entered value is invalid, please select 1 or 2')
}
if (continue == 1){
outputDir <- getAbsolutePath(dirs.df$Directory[n])
print(paste0('Extracting ', file.type, ' files to ', outputDir))
r <- F
run <- F
break
}
if (continue == 2) {
r <- F
setwd(dirs.df$Directory[n])
}
if (r == F) break()
}
}
if (run == F) break
}
}
}
if (continue == 2) {
r <- F
setwd(dirs.df$Directory[n])
}
rm(continue)
if (r == F) break()
}
}
if (run == F) break
}
path <- inputDir
exdir <- outputDir
}
#File extraction
setwd(path)
if ('.zip' %in% file.type == T){
zipfiles <- list.files(pattern = '.zip$')
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
zipindex <- match(txtgzzipfiles,zipfiles)
if (length(zipindex) > 0){
zipfiles <- zipfiles[-zipindex]
}
for (i in zipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files,
exdir = outputDir)
}
for (i in txtgzzipfiles){
unzip(paste0(getwd(),'/',i),
overwrite = overwrite.files)
}
gzfilestoremove <- list.files(pattern = 'txt.gz$')
for (i in gzfilestoremove){
R.utils::gunzip(i,
overwrite = overwrite.files,
remove = T,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
}
txtgzzipfiles <- list.files(pattern = 'txt.gz.zip$')
gzfiles <- list.files(pattern = '.gz')
gzindex <- match(txtgzzipfiles,gzfiles)
if (length(gzindex) > 0){
gzfiles <- gzfiles[-gzindex]
}
if ('.gz' %in% file.type == T){
for (i in gzfiles){
R.utils::gunzip(i,
overwrite = overwrite.files,
remove = F,
destname = paste0(outputDir,'/',gsub('.gz','',i)))
}
}
setwd(dirtop)
}
(!('.zip' %in% file.type) | !('.gz' %in% file.type))
file.type = c('.zip','.gz')
!('.zip' %in% file.type)
!('.gz' %in% file.type)
(!('.zip' %in% file.type) | !('.gz' %in% file.type))
library(FileR)
pkgload::dev_help('extract.Files')
detach("package:FileR", unload = TRUE)
library(FileR)
